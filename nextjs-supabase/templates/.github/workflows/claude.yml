# Updated settings for claude.yml as of 2025-07-12
name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"

          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"

          # MCP Server Configuration
          mcp_config: |
            {
              "mcpServers": {
                "supabase": {
                  "command": "npx",
                  "args": [
                    "-y",
                    "@supabase/mcp-server-supabase@latest",
                    "--read-only",
                    "--project-ref=${{ secrets.SUPABASE_PROJECT_ID }}"
                  ],
                  "env": {
                    "SUPABASE_ACCESS_TOKEN": "${{ secrets.SUPABASE_ACCESS_TOKEN }}"
                  }
                },
                "playwright": {
                  "command": "npx",
                  "args": [
                    "@playwright/mcp@latest"
                  ]
                }
              }
            }

          # Allow Claude to run specific commands and MCP tools
          # Consistent with claude-code-review.yml + git/PR commands
          allowed_tools: |
            Bash(npm install)
            Bash(npm run build)
            Bash(npm run lint)
            Bash(npm run check-all)
            Bash(npm test)
            Bash(npm run test:unit)
            Bash(npm run test:e2e)
            Bash(npm run dev)
            Bash(npm run db:generate)
            Bash(npm run db:migrate:local)
            Bash(npm run db:sync)
            Bash(npx playwright install)
            Bash(npx tsc --noEmit)
            Bash(git add .)
            Bash(git commit -m *)
            Bash(git push)
            Bash(git status)
            Bash(git diff)
            Bash(git log *)
            Bash(gh pr create *)
            Bash(gh pr edit *)
            Bash(gh pr comment *)
            Bash(gh pr review *)
            Bash(gh pr merge *)
            Bash(gh pr view *)
            Bash(git checkout -b *)

            # Supabase MCP Tools - READ-ONLY for GitHub Actions
            # Full access available locally via .mcp.json
            mcp__supabase__get_project
            mcp__supabase__list_tables
            mcp__supabase__list_extensions
            mcp__supabase__list_migrations
            mcp__supabase__execute_sql
            mcp__supabase__get_logs
            mcp__supabase__get_advisors
            mcp__supabase__search_docs
            mcp__supabase__generate_typescript_types

            # Playwright MCP Tools - Full browser automation
            mcp__playwright__browser_navigate
            mcp__playwright__browser_snapshot
            mcp__playwright__browser_click
            mcp__playwright__browser_type
            mcp__playwright__browser_fill_form
            mcp__playwright__browser_take_screenshot
            mcp__playwright__browser_wait_for
            mcp__playwright__browser_install
            mcp__playwright__browser_close
            mcp__playwright__browser_console_messages

          # Disallow specific tools (empty for now)
          disallowed_tools: |

          # Add custom instructions for Claude to customize its behavior for your project
          # References CLAUDE.md for all standards (DRY principle)
          custom_instructions: |
            You are working on the 10X ERP Hub application.

            **CRITICAL:** Follow ALL guidance in CLAUDE.md, including:
            - Core Development Principles (DRY, KISS, Single Responsibility)
            - Code Review Standards (Critical/Important/Optional categories)
            - Automation Workflows (proactive tool usage)
            - Database migration workflow (NEVER manually create migrations)
            - Git workflow (NEVER push directly to main)

            **Proactive MCP Tool Usage:**
            - Use Supabase MCP for database operations, verification, and advisors
            - Use Playwright MCP for browser testing and UI verification
            - Always check for security/performance issues after schema changes

            **Quality Standards:**
            - Run `npm run check-all` before any commit
            - All tests must pass (100% success rate)
            - Use existing patterns and components before creating new ones

          # Custom environment variables for Claude
          claude_env: |
            NODE_ENV: test
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
